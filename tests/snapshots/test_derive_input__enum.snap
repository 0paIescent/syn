---
created: "2019-03-11T05:40:04.803840235Z"
creator: insta@0.7.1
source: tests/test_derive_input.rs
expression: syntax_tree
---
DeriveInput {
    attrs: [
        Attribute {
            pound_token: Pound,
            style: Outer,
            bracket_token: Bracket,
            path: Path {
                leading_colon: None,
                segments: [
                    PathSegment {
                        ident: Ident(
                            doc
                        ),
                        arguments: None
                    }
                ]
            },
            tts: TokenStream [
                Punct {
                    op: '=',
                    spacing: Alone
                },
                Literal {
                    lit: r" See the std::result module documentation for details."
                }
            ]
        },
        Attribute {
            pound_token: Pound,
            style: Outer,
            bracket_token: Bracket,
            path: Path {
                leading_colon: None,
                segments: [
                    PathSegment {
                        ident: Ident(
                            must_use
                        ),
                        arguments: None
                    }
                ]
            },
            tts: TokenStream []
        }
    ],
    vis: Public(
        VisPublic {
            pub_token: Pub
        }
    ),
    ident: Ident(
        Result
    ),
    generics: Generics {
        lt_token: Some(
            Lt
        ),
        params: [
            Type(
                TypeParam {
                    attrs: [],
                    ident: Ident(
                        T
                    ),
                    colon_token: None,
                    bounds: [],
                    eq_token: None,
                    default: None
                }
            ),
            Comma,
            Type(
                TypeParam {
                    attrs: [],
                    ident: Ident(
                        E
                    ),
                    colon_token: None,
                    bounds: [],
                    eq_token: None,
                    default: None
                }
            )
        ],
        gt_token: Some(
            Gt
        ),
        where_clause: None
    },
    data: Enum(
        DataEnum {
            enum_token: Enum,
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        Ok
                    ),
                    fields: Unnamed(
                        FieldsUnnamed {
                            paren_token: Paren,
                            unnamed: [
                                Field {
                                    attrs: [],
                                    vis: Inherited,
                                    ident: None,
                                    colon_token: None,
                                    ty: Path(
                                        TypePath {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident(
                                                            T
                                                        ),
                                                        arguments: None
                                                    }
                                                ]
                                            }
                                        }
                                    )
                                }
                            ]
                        }
                    ),
                    discriminant: None
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        Err
                    ),
                    fields: Unnamed(
                        FieldsUnnamed {
                            paren_token: Paren,
                            unnamed: [
                                Field {
                                    attrs: [],
                                    vis: Inherited,
                                    ident: None,
                                    colon_token: None,
                                    ty: Path(
                                        TypePath {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident(
                                                            E
                                                        ),
                                                        arguments: None
                                                    }
                                                ]
                                            }
                                        }
                                    )
                                }
                            ]
                        }
                    ),
                    discriminant: None
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        Surprise
                    ),
                    fields: Unit,
                    discriminant: Some(
                        (
                            Eq,
                            Lit(
                                ExprLit {
                                    attrs: [],
                                    lit: Int(
                                        LitInt {
                                            token: Literal {
                                                lit: 0isize
                                            }
                                        }
                                    )
                                }
                            )
                        )
                    )
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        ProcMacroHack
                    ),
                    fields: Unit,
                    discriminant: Some(
                        (
                            Eq,
                            Field(
                                ExprField {
                                    attrs: [],
                                    base: Tuple(
                                        ExprTuple {
                                            attrs: [],
                                            paren_token: Paren,
                                            elems: [
                                                Lit(
                                                    ExprLit {
                                                        attrs: [],
                                                        lit: Int(
                                                            LitInt {
                                                                token: Literal {
                                                                    lit: 0
                                                                }
                                                            }
                                                        )
                                                    }
                                                ),
                                                Comma,
                                                Lit(
                                                    ExprLit {
                                                        attrs: [],
                                                        lit: Str(
                                                            LitStr {
                                                                token: Literal {
                                                                    lit: "data"
                                                                }
                                                            }
                                                        )
                                                    }
                                                )
                                            ]
                                        }
                                    ),
                                    dot_token: Dot,
                                    member: Unnamed(
                                        Index {
                                            index: 0,
                                            span: Span
                                        }
                                    )
                                }
                            )
                        )
                    )
                }
            ]
        }
    )
}
